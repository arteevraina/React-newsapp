{"version":3,"sources":["Header.js","Display.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Display","key","this","props","news","id","map","src","urlToImage","alt","href","url","title","React","Component","Content","handleClick","event","state","query","axios","get","then","response","console","log","data","articles","setState","catch","error","handleChange","target","value","handleKeyPress","bind","apiPath","type","placeholder","onChange","onKeyPress","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wMAYeA,G,MAVA,WACX,OACI,yBAAKC,UAAU,0CACX,yBAAKA,UAAU,aACX,kD,0DCuBDC,E,iLAxBX,OACI,yBAAKC,IAAKC,KAAKC,MAAMC,KAAKC,IAElBH,KAAKC,MAAMC,KAAKE,KAAI,SAACF,GACjB,OACA,yBAAKL,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,aACX,yBAAKQ,IAAKH,EAAKI,WAAYC,IAAI,cAC/B,yBAAKV,UAAU,WACX,uBAAGW,KAAMN,EAAKO,KAAK,4BAAKP,EAAKQ,qB,GAd/CC,IAAMC,WC4EbC,E,YAxEX,WAAYZ,GAAO,IAAD,8BACd,4CAAMA,KAyBVa,YAAc,SAACC,GACX,IAKMN,EALU,wCACJ,EAAKO,MAAMC,MAAQ,KACpB,4EAIXC,IAAMC,IAAIV,GACLW,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAASG,KAAKC,UAC1B,EAAKC,SAAS,CAACxB,KAAMmB,EAASG,KAAKC,cAEtCE,OAAM,SAACC,GACJN,QAAQC,IAAI,aAvCN,EA6ClBM,aAAe,SAACd,GACZ,EAAKW,SAAS,CACVT,MAAOF,EAAMe,OAAOC,SA/CV,EAmDlBC,eAAiB,SAACjB,GACG,UAAdA,EAAMhB,KACL,EAAKe,eAnDT,EAAKE,MAAQ,CACTd,KAAM,GACNe,MAAO,IAEX,EAAKgB,KAAO,EAAKJ,aAAaI,KAAlB,gBACZ,EAAKA,KAAO,EAAKnB,YAAYmB,KAAjB,gBACZ,EAAKA,KAAO,EAAKD,eAAeC,KAApB,gBARE,E,iFAUG,IAAD,OAKpBf,IAAMC,IADMe,2FAEPd,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAASG,KAAKC,UAC1B,EAAKC,SAAS,CAACxB,KAAMmB,EAASG,KAAKC,cAEtCE,OAAM,SAACC,GACJN,QAAQC,IAAI,c,+BAqChB,OACI,6BACI,yBAAK1B,UAAU,aACX,2BAAOsC,KAAK,OAAOtC,UAAU,eAAeuC,YAAY,aAAaC,SAAUrC,KAAK6B,aAAcS,WAAYtC,KAAKgC,iBACnH,6BACA,4BAAQG,KAAK,SAAStC,UAAU,kBAAkB0C,QAASvC,KAAKc,aAAhE,WAEJ,6BACA,kBAAC,EAAD,CAASZ,KAAQF,KAAKgB,MAAMd,Y,GApEtBS,IAAMC,WCSb4B,EATH,WACV,OACE,6BACE,4BAAI,kBAAC,EAAD,OACJ,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.7cff9f31.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Header = () => {\n    return(\n        <nav className=\"navbar navbar-default navbar-fixed-top\" >\n            <div className=\"container\">\n                <h3>React News App</h3>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header","import React from \"react\"\nimport \"./index.css\"\nclass Display extends React.Component {\n\n    render() {\n    return(\n        <div key={this.props.news.id}>\n            {\n                this.props.news.map((news) => {\n                    return(\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-sm-6 col-md-4\">\n                                <div className=\"thumbnail\">\n                                    <img src={news.urlToImage} alt=\"imagehere\"/>\n                                    <div className=\"caption\">\n                                        <a href={news.url}><h3>{news.title}</h3></a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    )\n                })\n            }\n        </div>\n    )}\n}\n\nexport default Display","import React from \"react\"\nimport axios from \"axios\"\nimport Display from \"./Display\"\n\nclass Content extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            news: [],\n            query: ''\n        }\n        this.bind = this.handleChange.bind(this)\n        this.bind = this.handleClick.bind(this)\n        this.bind = this.handleKeyPress.bind(this)\n    }\n    componentDidMount() {\n    const apiPath = \"https://newsapi.org/v2/top-headlines?\"\n    const country = \"country=us&\"\n    const apiKey = process.env.REACT_APP_API_KEY\n    const url = apiPath + country + apiKey\n    axios.get(url)\n        .then(response => {\n            console.log(response.data.articles)\n            this.setState({news: response.data.articles})\n        })\n        .catch((error) => {\n            console.log(\"error\")\n        })\n        \n    }\n\n    handleClick = (event) => {\n        const apiPath = \"https://newsapi.org/v2/everything?q=\"\n        var query = this.state.query + \"&\"\n        var date = \"from=2020-01-08&\"\n        var popularity = \"sortBy=popularity&\"\n        const apiKey = process.env.REACT_APP_API_KEY\n        const url = apiPath + query + date + popularity + apiKey\n        axios.get(url)\n            .then(response => {\n                console.log(response.data.articles)\n                this.setState({news: response.data.articles})\n            })\n            .catch((error) => {\n                console.log(\"error\")\n            })\n\n\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            query: event.target.value\n        })\n    }\n\n    handleKeyPress = (event) => {\n        if(event.key === \"Enter\") {\n            this.handleClick()\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"container\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Text input\" onChange={this.handleChange} onKeyPress={this.handleKeyPress}/>\n                    <br/>\n                    <button type=\"submit\" className=\"btn btn-success\" onClick={this.handleClick}>Search</button>\n                </div>\n                <br/>\n                <Display news = {this.state.news}/>\n            </div>\n        )\n    }\n}\n\nexport default Content","import React from \"react\"\nimport Header from \"./Header\"\nimport Content from \"./Content\"\n\nconst App = () => {\n  return(\n    <div>\n      <h1><Header/></h1>\n      <Content/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}